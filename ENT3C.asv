function [SIMILARITY,VN_ENT] = ENT3C(M,CELL_TYPE,ChrNr,BIN_TABLE_RED,Resolution,MAX_WINDOWS,CHRSPLIT,SUB_M_SIZE_FIX,WS,OUT)
% INPUT VARS

%   M ... input matrix
%   CELL_TYPE= ... name of cell-type to save in output table
%   OUT='temp.txt' ... filename of output table
%   Resolution=40e3; ... resolution of cool/to extract from mcool file
%   SUB_M_SIZE_FIX ... fixed submatrix size n
%   CHRSPLIT=10; ... determines window/sub-matrix size on which entropy values S(window) are calculated on
%   WS ... shift size of submatrix alon diagonal
%   MAX_WINDOWS=500; ... maximum number of entropy values to compute (window shift is reduced until desired window number is reached)
%   NormM=1 ... normalize input matrix with weights in cooler file


% OUTPUT VARS
%   SIMILARITY ... similarity score of two input matrices
%   VN_ENT ... output table with entropy values and other information

VN_ENT=[];
if SUB_M_SIZE_FIX==0||isnan(SUB_M_SIZE_FIX)
    SUB_M_SIZE=round(size(M,1)/CHRSPLIT);
    WN=1+floor((size(M,1)-SUB_M_SIZE)./WS);
    while WN>MAX_WINDOWS
        WS=WS+1;
        WN=1+floor((size(M,1)-SUB_M_SIZE)./WS);
    end
else
    SUB_M_SIZE=SUB_M_SIZE_FIX;
    WN=1+floor((size(M,1)-SUB_M_SIZE)./WS);
    while WN>MAX_WINDOWS
        WS=WS+1;
        WN=1+floor((size(M,1)-SUB_M_SIZE)./WS);
    end
end

WN=1+floor((size(M,1)-SUB_M_SIZE)./WS);
R1=1:WS:size(M,1);R1=R1(1:WN);
R2=R1+SUB_M_SIZE-1;R2=R2(1:WN);
R=[R1',R2'];

for rr=1:WN
    m=log(M(R(rr,1):R(rr,2),R(rr,1):R(rr,2)));
    f=find(isnan(m));
    m(f)=nanmin(m(:));
    P = corrcoef(m,'rows','complete');
    rho=P./size(P,1);

    lam = eig(full(rho));
    lam = lam(lam>0); 

    S = -sum(real(lam.*log(lam)));

    VN_ENT=[VN_ENT;table(CELL_TYPE,ChrNr,Resolution,SUB_M_SIZE,WN,WS,BIN_TABLE_RED.START(rr),BIN_TABLE_RED.END(rr),S(1),S(2),...
        'VariableNames',{'Name','ChrNr','Resolution','Sub_M_Size','WinNrs','WS','start','end','Smax','S'})];

     VN_ENT=[VN_ENT;table(SHORT_NAME,ChrNr,Resolution,SUB_M_SIZE,WN,WS,...
            BIN_TABLE_RED.binNrCHRS(R(rr,1)),BIN_TABLE_RED.binNrCHRS(R(rr,2)),BIN_TABLE_RED.START(R(rr,1)),BIN_TABLE_RED.END(R(rr,2)),S,...
            'VariableNames',{'Name','ChrNr','Resolution','Sub_M_Size','WinNrs','WS',...
            'binNrCHRS_start','binNrCHRS_end','start','end','S'})];

 SCurve=[SCurve;S];

        if PLOT==1  (rr==1||rr==2||rr==floor(WN/2)||rr==WN-1||rr==WN)
            figure(66);clf
            tiledlayout(2,2)
            nexttile(1,[1,1]);
            set(gcf,'Position',[210 69 1355 898])
            imagesc(M);hold on; 
            if rr~=WN
                set(gca,'YDir','normal','Fontsize',15,'Xtick',[1 R(rr,2) size(M,1)],'Ytick',[1 R(rr,2)  size(M,1)]);
            else
                set(gca,'YDir','normal','Fontsize',15,'Xtick',[1 R(rr,2)],'Ytick',[1 R(rr,2)]);
            end
            title(SHORT_NAME,'interpreter','latex','fontsize',20)
            axis square;colormap magma;
            %A=gca;A=A.Position;
            hold on;
            rectangle('Position', [R(rr,1), R(rr,1),length(R(rr,1):R(rr,2)),length(R(rr,1):R(rr,2))], 'EdgeColor', 'w', 'LineWidth', 2);
            nexttile(2,[1,1]);
            imagesc(rho);axis square;set(gca,'YDir','normal','Xtick',[],'Ytick',[]);
            title(sprintf('$S=%4.4f$',S),'interpreter','latex','fontsize',20)

            nexttile(3,[1,2]);
            plot(SCurve,'k','linewidth',2);hold on
            plot(SCurve,'m*','markersize',10)
            axis tight;ylabel('$S$','interpreter','latex','fontsize',25)

            title(sprintf('entropy curve',S),'interpreter','latex','fontsize',20);grid on
            xlim([0 WN]);drawnow
            saveas(gcf,sprintf('Figures/Chr%d_WS%dWN%d_Bin%d_Bin%d.svg',ChrNr,WS,rr,...
                BIN_TABLE_RED.binNrCHRS(R(rr,1)),BIN_TABLE_RED.binNrCHRS(R(rr,2))))
          %  plot(rr,SCurve,'linewidth',1);axis tight
            %OverlaY=axes('Position',[R(rr,1), R(rr,1),length(R(rr,1):R(rr,2)),length(R(rr,1):R(rr,2)))])
        end
            %position = [R(rr,1)/size(M,1), R(rr,1)/size(M,1),size(rho,2)/size(M,1),size(rho,2)/size(M,1)];
end




SIMILARITY=corrcoef(VN_ENT.S(strcmp(VN_ENT.Name,SHORT_NAMES(1))),VN_ENT.S(strcmp(VN_ENT.Name,SHORT_NAMES(2))));
SIMILARITY=SIMILARITY(1,2);

sprintf('Chr%d Resolution %d WN=%d windows of size %dx%d (WS=%d)\n\n%s\n%s\n\nSimScore=%4.4f',...
    ChrNr,Resolution,WN,SUB_M_SIZE,SUB_M_SIZE,WS,IN1,IN2,SIMILARITY)

writetable(VN_ENT,OUT,'Delimiter','tab')
















